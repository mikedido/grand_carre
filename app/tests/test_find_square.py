import unittest
from app import app
import app.services.find_square as fs


class TestfindSquare(unittest.TestCase):
    
    def setUp(self):
        self.matrix = [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', 'o', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'o', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', 'o', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'o', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', 'o', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'o', '.', '.', '.', '.', '.'], ['.', '.', 'o', '.', '.', '.', '.', '.', '.', '.', 'o', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]
        self.line_number = 9
        self.empty_caractere = '.'
        self.obstacle_caractere = 'o'
        self.full_caractere = 'x'

    def test_get_solution(self):
        expected_data = [(0, 0, 4), (0, 1, 3), (0, 2, 2), (0, 3, 1), (0, 4, 1), (0, 5, 7), (0, 6, 6), (0, 7, 5), (0, 8, 4), (0, 9, 3), (0, 10, 2), (0, 11, 2), (0, 12, 2), (0, 13, 5), (0, 14, 5), (0, 15, 5), (0, 16, 7), (0, 17, 7), (0, 18, 7), None, None, None, None, None, None, None, None, (1, 0, 4), (1, 1, 3), (1, 2, 2), (1, 3, 1), (1, 5, 6), (1, 6, 6), (1, 7, 5), (1, 8, 4), (1, 9, 3), (1, 10, 2), (1, 11, 1), (1, 12, 1), (1, 13, 4), (1, 14, 4), (1, 15, 4), (1, 16, 6), (1, 17, 6), (1, 18, 6), (1, 19, 6), None, None, None, None, None, None, None, (2, 0, 4), (2, 1, 3), (2, 2, 2), (2, 3, 2), (2, 4, 2), (2, 5, 5), (2, 6, 5), (2, 7, 5), (2, 8, 4), (2, 9, 3), (2, 10, 2), (2, 11, 1), (2, 13, 3), (2, 14, 3), (2, 15, 3), (2, 16, 5), (2, 17, 5), (2, 18, 5), (2, 19, 5), (2, 20, 5), None, None, None, None, None, None, (3, 0, 4), (3, 1, 3), (3, 2, 2), (3, 3, 1), (3, 4, 1), (3, 5, 4), (3, 6, 4), None, None, None, None, (3, 11, 4), (3, 12, 3), (3, 13, 2), (3, 14, 2), (3, 15, 2), None, (3, 17, 4), (3, 18, 4), (3, 19, 4), (3, 20, 4), (3, 21, 4), None, None, None, None, None, None, (4, 1, 3), (4, 2, 2), (4, 3, 1), (4, 5, 3), (4, 6, 3), None, None, None, None, None, (4, 12, 3), (4, 13, 2), (4, 14, 1), (4, 15, 1), None, None, (4, 18, 3), (4, 19, 3), (4, 20, 3), (4, 21, 3), None, None, None, None, None, None, None, None, None, (5, 4, 2), (5, 5, 2), (5, 6, 2), None, None, None, None, None, None, (5, 13, 2), (5, 14, 1), None, None, None, (5, 19, 2), (5, 20, 2), (5, 21, 2), None, None, None, None, None, None, None, None, None, None, (6, 5, 1), (6, 6, 1), None, None, None, None, None, None, None, None, None, None, 
                        None, None, None, (6, 20, 1), (6, 21, 1), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, 
                        None, None, None]
        self.assertEqual(fs.get_solution(self.matrix, self.line_number, self.empty_caractere, self.obstacle_caractere, self.full_caractere), expected_data)


    def test_find_square(self):
        expected_data = [['.', '.', '.', '.', '.', 'x', 'x', 'x', 'x', 'x', 'x', 'x', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', 'o', 'x', 'x', 'x', 'x', 'x', 'x', 'x', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'o', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', 'x', 'x', 'x', 'x', 'x', 'x', 'x', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', 'o', 'x', 'x', 'x', 'x', 'x', 'x', 'x', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', 'x', 'x', 'x', 'x', 'x', 'x', 'x', '.', '.', '.', 'o', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', 'x', 'x', 'x', 'x', 'x', 'x', 'x', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'], ['.', '.', '.', '.', '.', '.', 'o', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', 'o', '.', '.', '.', '.', '.'], ['.', '.', 'o', '.', '.', '.', '.', '.', '.', '.', 'o', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.']] 
        self.assertEqual(fs.find_square(self.matrix, ['', str(self.line_number), self.empty_caractere, self.obstacle_caractere,self.full_caractere]), expected_data)


    def test_get_solution_point(self):
        self.assertEqual(fs.get_solution_point(0 ,0, self.line_number, self.obstacle_caractere, self.matrix), (0,0,4))


    def test_get_best_solution(self):
        data = [(0,0,2), (0,1,7), (0,2,7), (0,3,4)]
        expected_data = (0,1,7)
        self.assertEqual(fs.get_best_solution(data), expected_data)

